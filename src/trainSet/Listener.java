package trainSet;
/*
 * Autore: Bacigalupo Marta
 *
 * Data: 02/07/2017
 *
 * The purpose of the project is to provide a tool for speeding up and simplifying
 * the analysis of the performance of automatic classifiers
 * serializing them with different input configurations, train
 * Sets and test sets that will be specified by the user.
 * In particular this part of implementation deals with the the management of 
 * the train set that the user wishes to use and manages adding, setting, and 
 * removing them.
 * 
 */


import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 * Superclass of listener that implementing the TableModelListener class
 * provides methods for managing events generated by graphic elements
 *  to which that listener is connected
 */


public class Listener implements TableModelListener {
	protected boolean externalModify;
	protected FileManager fileManager;
	protected String selectedElement, table;
	protected TableModel model;
	protected FileType fileType;
	protected int row, column;
	
	public Listener(FileManager fileManager, FileType fileType) throws Exception {
		this.fileManager = fileManager;
		this.fileType = fileType;
		
		externalModify = true;
		selectedElement = null;
		this.table = Database.getTableName(fileType);
	}
	
	public String getSelectedElement() {
		return selectedElement;
	}
    
    /**
     * Allows to update the "click" status to a model named "name" 
     * in the table "fileType"
     *
     * @param selectedName
     * @param checked
     * @param fileType
     * @throws Exception
     */
	
	protected void updateDatabase(String selectedName, boolean checked) throws Exception {
		fileManager.updateClicked(selectedName, checked, fileType);
	}
	
    /**
     * Callback function for the tables.
     */
	
	@Override
	public void tableChanged(TableModelEvent e) {
		try {
			tableChangedHandler(e);
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
	
    /**
     * This method is invoked when the Callback function is activated. 
     * Retrieves the newly checked item and accordingly updates the fileManager 
     * and the database accordingly.
     *
     * @param e
     * @return
     * @throws Exception
     */
	
	public boolean tableChangedHandler(TableModelEvent e) throws Exception {
		if (!externalModify)
			return false;
		
		row = e.getFirstRow();
		column = e.getColumn();

		model = (TableModel) e.getSource();
		selectedElement = (String) model.getValueAt(row, 1);
		
		boolean checked = (boolean) model.getValueAt(row, column);
		

        // Set to checked the selected element (of fileType) in the FileManager
		fileManager.setClicked(fileType, row, checked);

		// Updates the database with the selected element
		updateDatabase(selectedElement, checked);
		
		return true;
	}
	
    /**
     * Useful to avoid activating new callbacks of type
     * TableChanged when editing the table.
     */
	
	public void setLock() {
		externalModify = false;
	}

	public void unsetLock() {
		externalModify = true;
	}

	public boolean isLocked() {
		return externalModify;
	}
}
